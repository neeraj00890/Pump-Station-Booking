{"version":3,"sources":["./src/app/auth/login-form/login-form.component.html","./src/app/auth/registration-form/registration-form.component.html","./src/app/auth/auth-rest-call-service.ts","./src/app/auth/auth-service.ts","./src/app/auth/auth.module.ts","./src/app/auth/auth.routing.module.ts","./src/app/auth/login-form/login-form.component.css","./src/app/auth/login-form/login-form.component.ts","./src/app/auth/registration-form/registration-form.component.css","./src/app/auth/registration-form/registration-form.component.ts"],"names":[],"mappings":"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","file":"auth-auth-module.js","sourcesContent":["export default \"<div class=\\\"row\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"col-md-4\\\">\\n\\n    </div>\\n    <div class=\\\"col-md-4 well\\\">\\n      <h3>Login Form</h3>\\n      <form action=\\\"\\\" #loginForm ='ngForm'>\\n\\n\\n        <p>\\n            <mat-form-field appearance=\\\"legacy\\\">\\n              <mat-label>User Name</mat-label>\\n              <input matInput name=\\\"username\\\" placeholder=\\\"Username\\\" [(ngModel)]=\\\"username\\\" required>\\n             \\n              <mat-hint>Provide valid username</mat-hint>\\n            </mat-form-field>\\n          </p>\\n          <p>\\n            <mat-form-field appearance=\\\"standard\\\">\\n              <mat-label>Password</mat-label>\\n              <input matInput type=\\\"password\\\" name=\\\"password\\\" placeholder=\\\"Password\\\" [(ngModel)]=\\\"password\\\" required>\\n            </mat-form-field>\\n          </p>\\n    \\n          <button mat-raised-button color=\\\"primary\\\" (click)=\\\"onLogin(loginForm)\\\" [disabled]=\\\"loginForm.invalid\\\">Login</button><br>\\n          <button mat-raised-button color=\\\"primary\\\" (click)=\\\"onRegister()\\\">New Registration?</button>\\n    </form>\\n    </div>\\n    <div class=\\\"col-md-4\\\">\\n      \\n    </div>\\n  </div>\\n  \\n</div>\\n\\n\\n\\n  \\n  \\n  <!-- Copyright 2020 Google LLC. All Rights Reserved.\\n      Use of this source code is governed by an MIT-style license that\\n      can be found in the LICENSE file at http://angular.io/license -->\"","export default \"\\n\\n<div class=\\\"row\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"col-md-4\\\">\\n\\n    </div>\\n    <div class=\\\"col-md-4 well\\\">\\n      <h3>Registration Form</h3>\\n      <form action=\\\"\\\" #regForm ='ngForm'>\\n\\n\\n        <p>\\n            <mat-form-field appearance=\\\"legacy\\\">\\n              <mat-label>User Name</mat-label>\\n              <input matInput name=\\\"username\\\" placeholder=\\\"Username\\\" [(ngModel)]=\\\"username\\\" required>\\n             \\n              <mat-hint>Provide valid username</mat-hint>\\n            </mat-form-field>\\n          </p>\\n          <p>\\n            <mat-form-field appearance=\\\"standard\\\">\\n              <mat-label>Password</mat-label>\\n              <input matInput  type=\\\"password\\\" name=\\\"password\\\" placeholder=\\\"Password\\\"  required [(ngModel)]=\\\"password\\\">\\n            </mat-form-field>\\n          </p>\\n          <p>\\n            <mat-form-field appearance=\\\"standard\\\">\\n              <mat-label>Confirm Password</mat-label>\\n              <input matInput  type=\\\"password\\\" name=\\\"cpassword\\\" placeholder=\\\"Confirm Password\\\" [(ngModel)]=\\\"cpassword\\\" required>\\n            </mat-form-field>\\n          </p>\\n          <p>\\n            <mat-form-field appearance=\\\"standard\\\">\\n              <mat-label>Email</mat-label>\\n              <input matInput name=\\\"email\\\" placeholder=\\\"Email\\\" [(ngModel)]=\\\"email\\\" required>\\n            </mat-form-field>\\n          </p>\\n    \\n          <mat-form-field appearance=\\\"fill\\\">\\n            <mat-label>Role</mat-label>\\n            <mat-select name =\\\"role\\\"  [(ngModel)]=\\\"role\\\" >\\n              <mat-option value=\\\"Pump Owner\\\">Pump Owner</mat-option>\\n              <mat-option value=\\\"End User\\\" >End User</mat-option>\\n            \\n            </mat-select>\\n          </mat-form-field>\\n          \\n    \\n          <button mat-raised-button color=\\\"primary\\\" (click)=\\\"OnRegisteration(regForm)\\\" [disabled]=\\\"regForm.invalid\\\">Register</button>\\n         \\n    </form>\\n    </div>\\n    <div class=\\\"col-md-4\\\">\\n      \\n    </div>\\n  </div>\\n</div>\\n\\n\\n\\n  \\n  \\n  <!-- Copyright 2020 Google LLC. All Rights Reserved.\\n      Use of this source code is governed by an MIT-style license that\\n      can be found in the LICENSE file at http://angular.io/license -->\"","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { throwError, Observable } from 'rxjs';\r\n\r\n\r\n@Injectable()\r\nexport class AuthRestCallService{\r\n    baseUrl:string=environment.baseUrl;\r\nconstructor(private http:HttpClient){\r\n\r\n}\r\n\r\n\r\nerrorHander(err){\r\n    return throwError(err['message'])\r\n}\r\nregister(url,user){\r\n   return this.http.post(url,user).pipe(\r\n       map((res:Response)=>res),\r\n       catchError(this.errorHander)\r\n    )\r\n}\r\nlogin(url,payload){\r\n    return this.http.post(url,payload).pipe(\r\n        map((res:Response)=>res),\r\n        catchError(this.errorHander)\r\n     )\r\n }\r\n\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { AuthRestCallService } from './auth-rest-call-service';\r\nimport {MatSnackBar} from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\n\r\n\r\n@Injectable()\r\nexport class AuthService{\r\n\r\n    constructor(private restCallsService:AuthRestCallService,private _snackBar: MatSnackBar,private router:Router){\r\n\r\n    }\r\n\r\n\r\n    registerUser(user){\r\n        const URL=`pump/auth/register`\r\n       this.restCallsService.register(URL,user).subscribe((data)=>{\r\n        if(data['success']){\r\n            this._snackBar.open('Registration Successfull', 'Ok', {\r\n                duration: 2000,\r\n              });\r\n              this.router.navigate(['login']);\r\n        }\r\n       })\r\n\r\n       \r\n    }\r\n\r\n    login(payload){\r\n        const URL=`pump/auth/login`;\r\n        this.restCallsService.login(URL,payload).subscribe((data)=>{\r\n            localStorage.setItem('loggedInUser',data['_id']);\r\n            if(data['success']){\r\n                \r\n                  if(data['role']=='Pump Owner')\r\n                     this.router.navigate(['booking','grid']);\r\n                     else\r\n                     this.router.navigate(['booking','form']);\r\n\r\n            }\r\n            else{\r\n                this._snackBar.open('Bad Credentital!!', 'Ok', {\r\n                    duration: 2000,\r\n                  });\r\n            }\r\n           })\r\n    }\r\n\r\n\r\n\r\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoginFormComponent } from './login-form/login-form.component';\nimport { RegistrationFormComponent } from './registration-form/registration-form.component';\nimport { AuthRoutingModule } from './auth.routing.module';\nimport { MaterialModule } from '../material/material.module';\nimport { FormsModule } from '@angular/forms';\nimport { AuthService } from './auth-service';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AuthRestCallService } from './auth-rest-call-service';\n\n\n\n@NgModule({\n  declarations: [LoginFormComponent, RegistrationFormComponent],\n  imports: [\n    CommonModule,\n    AuthRoutingModule,\n    MaterialModule,\n    FormsModule,\n    HttpClientModule\n\n  ],\n  providers:[AuthService,AuthRestCallService]\n})\nexport class AuthModule { }\n","import { Route } from '@angular/compiler/src/core';\r\nimport { NgModule } from '@angular/core';\r\nimport { Router, RouterModule, Routes } from '@angular/router';\r\nimport { LoginFormComponent } from './login-form/login-form.component';\r\nimport { RegistrationFormComponent } from './registration-form/registration-form.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path:'',\r\n        redirectTo:'login',\r\n        pathMatch:'full',\r\n        \r\n    },\r\n    {\r\n        path:'login',\r\n        component:LoginFormComponent\r\n    },\r\n    {\r\n        path:'register',\r\n        component:RegistrationFormComponent\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports:[RouterModule.forChild(routes)],\r\n    exports:[RouterModule]\r\n})\r\nexport class AuthRoutingModule{\r\n\r\n}","export default \"button{\\r\\n    display: flex;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXV0aC9sb2dpbi1mb3JtL2xvZ2luLWZvcm0uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGFBQWE7QUFDakIiLCJmaWxlIjoic3JjL2FwcC9hdXRoL2xvZ2luLWZvcm0vbG9naW4tZm9ybS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiYnV0dG9ue1xyXG4gICAgZGlzcGxheTogZmxleDtcclxufSJdfQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth-service';\n\n@Component({\n  selector: 'app-login-form',\n  templateUrl: './login-form.component.html',\n  styleUrls: ['./login-form.component.css']\n})\nexport class LoginFormComponent implements OnInit {\n\n  constructor(private router:Router,private authService:AuthService) { \n\n\n  }\n  username:string;\n  password:string;\n  ngOnInit() {\n   \n  }\n\n  onLogin(loginForm:NgForm){\n    let payload= {\n      userName:loginForm.controls.username.value,\n      password:loginForm.controls.password.value,\n    }\n\n    this.authService.login(payload);\n\n  }\n  onRegister(){\n    this.router.navigate(['register'])\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvcmVnaXN0cmF0aW9uLWZvcm0vcmVnaXN0cmF0aW9uLWZvcm0uY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material';\n\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth-service';\n\n@Component({\n  selector: 'app-registration-form',\n  templateUrl: './registration-form.component.html',\n  styleUrls: ['./registration-form.component.css']\n})\nexport class RegistrationFormComponent implements OnInit {\n\n  constructor(private _snackBar: MatSnackBar,private authService:AuthService,private router:Router) { }\n\n  ngOnInit() {\n  }\n\n  OnRegisteration(regForm:NgForm){\n    if(regForm.controls.password.value !=regForm.controls.cpassword.value){\n      this._snackBar.open('Password does not matched', 'Ok', {\n        duration: 2000,\n      });\n      return;\n    }\n   let user= {\n      userName:regForm.controls.username.value,\n      password:regForm.controls.password.value,\n      email:regForm.controls.email.value,\n      role:regForm.controls.role.value,\n    }\n  \n    this.authService.registerUser(user);\n   \n    \n  }\n\n}\n"],"sourceRoot":"webpack:///"}